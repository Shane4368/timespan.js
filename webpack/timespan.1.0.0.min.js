var TimeSpan=function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t){if(isNaN(t))throw new TypeError(`Type 'number' expected. Received type '${typeof t}'`);if(t<Number.MIN_SAFE_INTEGER||t>Number.MAX_SAFE_INTEGER)throw new RangeError("Argument must be within range Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER");this.totalMilliseconds=Math.round(t),this.totalSeconds=this.totalMilliseconds/i.MILLISECONDS_PER_SECOND,this.totalMinutes=this.totalMilliseconds/i.MILLISECONDS_PER_MINUTE,this.totalHours=this.totalMilliseconds/i.MILLISECONDS_PER_HOUR,this.totalDays=this.totalMilliseconds/i.MILLISECONDS_PER_DAY,this.days=Math.floor(this.totalDays),this.hours=Math.floor(this.totalHours%24),this.minutes=Math.floor(this.totalMinutes%60),this.seconds=Math.floor(this.totalSeconds%60),this.milliseconds=Math.floor(this.totalMilliseconds%1e3)}equals(t){return this.totalMilliseconds===t.totalMilliseconds}add(t){return new i(this.totalMilliseconds+t.totalMilliseconds)}subtract(t){return new i(this.totalMilliseconds-t.totalMilliseconds)}multiply(t){return new i(this.totalMilliseconds*t)}divide(t){return t instanceof i?this.totalMilliseconds/t.totalMilliseconds:new i(this.totalMilliseconds/t)}toString(t=!1){let e=`${this.hours>=10?this.hours:"0"+this.hours}:${this.minutes>=10?this.minutes:"0"+this.minutes}:${this.seconds>=10?this.seconds:"0"+this.seconds}`;return this.days>0&&(e=`${this.days}.${e}`),t&&this.milliseconds>0&&(this.milliseconds<10?e+=".00"+this.milliseconds:this.milliseconds<100?e+=".0"+this.milliseconds:e+="."+this.milliseconds),e}valueOf(){return this.totalMilliseconds}static get MAX_VALUE(){return new i(Number.MAX_SAFE_INTEGER)}static get MIN_VALUE(){return new i(Number.MIN_SAFE_INTEGER)}static get MILLISECONDS_PER_SECOND(){return 1e3}static get MILLISECONDS_PER_MINUTE(){return 6e4}static get MILLISECONDS_PER_HOUR(){return 36e5}static get MILLISECONDS_PER_DAY(){return 864e5}static fromMilliseconds(t){return new i(t)}static fromSeconds(t){return new i(t*i.MILLISECONDS_PER_SECOND)}static fromMinutes(t){return new i(t*i.MILLISECONDS_PER_MINUTE)}static fromHours(t){return new i(t*i.MILLISECONDS_PER_HOUR)}static fromDays(t){return new i(t*i.MILLISECONDS_PER_DAY)}static parse(t){let e=0;if("string"==typeof t){const s=t.split(":");if(e+=parseInt(s[1])*i.MILLISECONDS_PER_MINUTE+parseFloat(s[2])*i.MILLISECONDS_PER_SECOND,s[0].includes(".")){const[t,n]=s[0].split(".");e+=parseInt(t)*i.MILLISECONDS_PER_DAY+parseInt(n)*i.MILLISECONDS_PER_HOUR}else e+=parseInt(s[0])*i.MILLISECONDS_PER_HOUR}else if("number"==typeof t[0])3===t.length?e=t[0]*i.MILLISECONDS_PER_HOUR+t[1]*i.MILLISECONDS_PER_MINUTE+t[2]*i.MILLISECONDS_PER_SECOND:4===t.length?e=t[0]*i.MILLISECONDS_PER_DAY+t[1]*i.MILLISECONDS_PER_HOUR+t[2]*i.MILLISECONDS_PER_MINUTE+t[3]*i.MILLISECONDS_PER_SECOND:5===t.length&&(e=t[0]*i.MILLISECONDS_PER_DAY+t[1]*i.MILLISECONDS_PER_HOUR+t[2]*i.MILLISECONDS_PER_MINUTE+t[3]*i.MILLISECONDS_PER_SECOND+t[4]);else{const s=["day","days"],n=["hour","hours","hr","hrs"],r=["minute","minutes","min","mins"],o=["second","seconds","sec","secs"];for(let l=t.length-1;l>0;l--)s.includes(t[l])?e+=parseFloat(t[l-1])*i.MILLISECONDS_PER_DAY:n.includes(t[l])?e+=parseFloat(t[l-1])*i.MILLISECONDS_PER_HOUR:r.includes(t[l])?e+=parseFloat(t[l-1])*i.MILLISECONDS_PER_MINUTE:o.includes(t[l])&&(e+=parseFloat(t[l-1])*i.MILLISECONDS_PER_SECOND)}return new i(e)}static tryParse(t){try{return this.parse(t)}catch(t){return null}}}e.TimeSpan=i}]).TimeSpan;